stages:
  - build

.caching_rust: &caching_rust
  cache:
    key: $CI_JOB_NAME
    paths:
      - .cargo
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/.cargo

.rust-latest: &rust_latest
  stage: build
  image: rust:latest
  script:
    - cargo build --all-features --verbose
    - cargo test --all-features --verbose

.rust-nightly: &rust_nightly
  stage: build
  image: rustlang/rust:nightly
  script:
    - cargo build --all-features --verbose
    - cargo test --all-features --verbose
  allow_failure: true

rust-code-lint:
  stage: build
  image: rust:latest
  <<: *caching_rust
  tags:
    - docker
    - linux
  before_script:
    - apt-get update -yq && apt-get install -y protobuf-compiler && protoc --version
    - rustup component add rustfmt
    - rustup component add clippy
  script:
    # we need a build since otherwise protobuf modules will not be available
    - cargo build --all-features --verbose
    - cargo fmt --all -- --check
    - cargo clippy --all-targets --all-features -- -D warnings
  allow_failure: true

rust-coverage:
  stage: build
  image: rustlang/rust:nightly-bullseye
  <<: *caching_rust
  tags:
    - docker
    - linux
  before_script:
    - apt-get update -yq && apt-get install -y protobuf-compiler && protoc --version
    - rustup component add llvm-tools-preview
    - cargo install grcov
  script:
    - RUSTFLAGS='-Zinstrument-coverage --cfg coverage' LLVM_PROFILE_FILE='coverage-%p-%m.profraw' cargo test > /dev/null
    - '"$CI_PROJECT_DIR/.cargo/bin/grcov" . -s . --binary-path ./target/debug/ -t html --branch --ignore-not-existing --ignore ''onion_lib/src/p2p_protocol/messages/*'' --ignore ''onion_bin/*'' --ignore ''onion_examples/*'' --ignore ''onion_tests/*'' --ignore ''.cargo/*'' -o coverage/ --excl-line coverage-unreachable'
    - '"$CI_PROJECT_DIR/.cargo/bin/grcov" . -s . --binary-path ./target/debug/ -t cobertura --branch --ignore-not-existing --ignore ''onion_lib/src/p2p_protocol/messages/*'' --ignore ''onion_bin/*'' --ignore ''onion_examples/*'' --ignore ''onion_tests/*'' --ignore ''.cargo/*'' -o coverage/cobertura.xml --excl-line coverage-unreachable'
    - 'echo "print (\"{0:.2f}% coverage\".format($(sed -En ''s/<coverage .* line-rate="([[:digit:]]*\.?[[:digit:]]*)" .*>/\1/p'' coverage/cobertura.xml) * 100))" | python3'
  after_script:
    - mkdir -p public
    - mv coverage/ public/coverage/
  artifacts:
    paths:
      - public/
    reports:
      cobertura: public/coverage/cobertura.xml

rust-latest-linux:
  before_script:
    - apt-get update -yq && apt-get install -y protobuf-compiler && protoc --version
  <<: *rust_latest
  <<: *caching_rust
  tags:
    - docker
    - linux

rust-latest-darwin:
  <<: *rust_latest
  tags:
    - docker
    - darwin
  allow_failure: true

rust-nightly-linux:
  before_script:
    - apt-get update -yq && apt-get install -y protobuf-compiler && protoc --version
  <<: *rust_nightly
  <<: *caching_rust
  tags:
    - docker
    - linux

rust-nightly-darwin:
  <<: *rust_nightly
  tags:
    - docker
    - darwin
