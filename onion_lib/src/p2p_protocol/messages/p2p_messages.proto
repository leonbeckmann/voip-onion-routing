syntax = "proto3";

// P2P Onion Tunnel frame
message TunnelFrame {

  // an identifier for identifying the corresponding tunnel of this frame
  fixed32 frame_id = 1;

  // random, unpredictable iv used for encryption
  bytes iv = 2;

  // auth_tag + [padding_size: u16, data_type: u8, data, padding] encrypted
  bytes data = 3;

}

message HandshakeData {
  // establish secure channel
  oneof message {
    ClientHello client_hello = 1;
    ServerHello server_hello = 2;
    RoutingInformation routing = 3;
  }
}

message ClientHello {
  // frameId used for communicating with the source
  uint32 backward_frame_id = 1;
  bytes ecdh_public_key = 2;
}

message ServerHello {
  // used for hops to tell next hop how to address prev hop
  uint32 backward_frame_id = 1;
  // public ECDHE parameter
  bytes ecdh_public_key = 2;
  // challenge for client authentication
  bytes challenge = 3;
  // iv for encrypted data
  bytes iv = 4;
  // encrypted data
  bytes encrypted_data = 5;
}

message EncryptedServerHelloData {
  bytes signature = 1;
  repeated uint32 backward_frame_ids = 2;
  repeated uint32 forward_frame_ids = 3;
}

message RoutingInformation {
  bool is_endpoint = 1;
  bytes next_hop_addr = 2;
  uint32 next_hop_port = 3;

  oneof optional_challenge_response {
    bytes challenge_response = 4;
  }

  repeated uint32 backward_frame_ids = 5;
  uint32 tunnel_update_reference = 6;
  bool cover_only = 7;
}

message ApplicationData {
  fixed32 sequence_number = 1;
  oneof message {
    bytes data = 2;
    CoverTraffic cover_traffic = 3;
  }
}

message CoverTraffic {
  bytes data = 1;
  bool mirrored = 2;
}

message Close {}
